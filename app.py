from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import pandas as pd

app = Flask(__name__)

# Load scheme CSV
schemes = pd.read_csv("wep_sample_schemes.csv")

# Store user states in-memory (simple for demo)
user_states = {}

@app.route("/webhook", methods=["POST"])
def webhook():
    incoming_msg = request.values.get("Body", "").strip()
    from_number = request.values.get("From", "")

    resp = MessagingResponse()
    msg = resp.message()

    # Initialize state for new user
    if from_number not in user_states:
        user_states[from_number] = {"step": "start"}
        msg.body("‡§®‡§Æ‡§∏‡•ç‡§§‡•á üëã Welcome to WEP Bot!\nShall we find schemes for you? (Yes/No)")
        return str(resp)

    state = user_states[from_number]

    # Flow
    if state["step"] == "start":
        if incoming_msg.lower() in ["yes", "‡§π‡§æ‡§Å", "haan"]:
            state["step"] = "sector"
            msg.body("Great! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•á‡§ï‡•ç‡§ü‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç:\n1. Food Processing\n2. Handicrafts\n3. Services\n4. Others")
        else:
            msg.body("‡§†‡•Ä‡§ï ‡§π‡•à‡•§ ‡§ú‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§Ç, 'Yes' ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§")

    elif state["step"] == "sector":
        state["sector"] = incoming_msg
        state["step"] = "age"
        msg.body("‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§æ‡§≤ ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§π‡•à?\n1. 1 ‡§∏‡§æ‡§≤ ‡§∏‡•á ‡§ï‡§Æ\n2. 1-3 ‡§∏‡§æ‡§≤\n3. 3+ ‡§∏‡§æ‡§≤")

    elif state["step"] == "age":
        state["age"] = incoming_msg
        state["step"] = "registered"
        msg.body("‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ (GST/MSME) ‡§π‡•à? (Yes/No)")

    elif state["step"] == "registered":
        state["registered"] = incoming_msg
        state["step"] = "assistance"
        msg.body("‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?\n1. Loan\n2. Training\n3. Marketing\n4. Technology")

    elif state["step"] == "assistance":
        state["assistance"] = incoming_msg
        state["step"] = "done"

        # ---- Filtering Logic ----
        sector_map = {
            "1": "food",
            "2": "handicraft",
            "3": "services",
            "4": "general"
        }
        pillar_map = {
            "1": "Access to finance",
            "2": "Skill development",
            "3": "Marketing assistance",
            "4": "Technology"
        }

        sector = sector_map.get(state["sector"], "general")
        assistance = pillar_map.get(state["assistance"], "general")
        registered = state["registered"].lower() in ["yes", "‡§π‡§æ‡§Å"]

        # Filter schemes by assistance pillar
        filtered = schemes[schemes["pillar"].str.contains(assistance, case=False, na=False)]

        # Sector keyword match
        if sector != "general":
            filtered = filtered[filtered["eligibility_summary"].str.contains(sector, case=False, na=False)]

        # Registration filter (basic check)
        if not registered:
            filtered = filtered[filtered["eligibility_summary"].str.contains("unregistered|informal", case=False, na=False)]

        # Fallback
        if len(filtered) < 3:
            filtered = schemes.sample(3)

        # Build reply
        reply = "‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ø‡•á ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Å ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡§Ç:\n\n"
        for i, row in filtered.head(3).iterrows():
            reply += f"{i+1}Ô∏è‚É£ {row['scheme_name']} ({row['benefit_summary']})\nüëâ Apply: {row['application_url']}\nDocs: {row['required_documents']}\n\n"

        msg.body(reply)

    else:
        msg.body("Demo end ‚úÖ. Type 'Hi' to restart.")

    return str(resp)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
